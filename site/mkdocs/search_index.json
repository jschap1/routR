{
    "docs": [
        {
            "location": "/",
            "text": "RoutR\n\n\nRoutR\n is an R package for making input files for the Fortran version of the University of Washington (UW) hydrologic routing model (\nLohmann et al., 1998\n). The Fortran version of the UW routing model can be found \nhere\n. (There is also an updated version called \"\nRVIC\n,\" which has been adapted into Python.) RoutR is a collection of R functions I wrote to make inputs for, and analyze outputs from, the UW routing model.\n\n\nThe UW routing model is a linear routing scheme based on a simplified version of the Saint Venant equations. The model has six required input files and three optional input files. RoutR was designed to assist in creation of these input files.\n\n\nRequired input files\n\n\n\n\nParameter file\n - tells the routing model the names and locations of the different input and output files and the start and end time for the model run. It also tells the routing model where to save output files.\n\n\nFlow direction file\n - describes how water flows from one grid cell to another within the study area. The UW routing model uses a D8 flow direction convention with 1 being north, increasing clockwise.\n\n\nUnit hydrograph file\n - describes the unit hydrograph. A sample unit hydrograph is provided on the \nVIC 4.2d documentation website\n.\n\n\nStation location file\n - tells the routing model where to calculate streamflow.\n\n\nFraction file\n - determines which grid cells are included in the model run, and allows inclusion of fractions of grid cells.\n\n\nRunoff (forcing) files\n - The forcings for the UW routing model are runoff and baseflow fields (typically outputs from a land surface model, such as VIC).\n\n\n\n\nNote that the UW routing model can be used with the ASCII-formatted outputs from the VIC-5 classic driver, after some small modifications to the VIC output files.\n\n\nOptional input files\n\n\n\n\nVelocity file\n - contains information about the flow velocity\n\n\nxmask file\n - related to the area of a grid cells\n\n\ndiff file\n - flow diffusion file. Contains the flow diffusion parameter.\n\n\n\n\nSee the official \nVIC 4.2d documentation website\n for further details. While RoutR is helpful for creating input files for the UW routing model, users are encouraged to read the official documentation, as well. \n\n\nInstallation\n\n\nRoutR is an R package and can be installed from Github via the R command \ninstall_github\n, from the \ndevtools\n package. Also, the \nraster\n and \nrgdal\n packages are required. \n\n\nlibrary(devtools)\ninstall_github(\"https://github.com/jschap1/routR\")\n\n\n\n\nRecommended software\n\n\n\n\nGRASS GIS - for delineating watersheds and creating the flow direction file\n\n\nFlow Direction Toolkit - for making manual adjustments to the flow direction file",
            "title": "Home"
        },
        {
            "location": "/#routr",
            "text": "RoutR  is an R package for making input files for the Fortran version of the University of Washington (UW) hydrologic routing model ( Lohmann et al., 1998 ). The Fortran version of the UW routing model can be found  here . (There is also an updated version called \" RVIC ,\" which has been adapted into Python.) RoutR is a collection of R functions I wrote to make inputs for, and analyze outputs from, the UW routing model.  The UW routing model is a linear routing scheme based on a simplified version of the Saint Venant equations. The model has six required input files and three optional input files. RoutR was designed to assist in creation of these input files.",
            "title": "RoutR"
        },
        {
            "location": "/#required-input-files",
            "text": "Parameter file  - tells the routing model the names and locations of the different input and output files and the start and end time for the model run. It also tells the routing model where to save output files.  Flow direction file  - describes how water flows from one grid cell to another within the study area. The UW routing model uses a D8 flow direction convention with 1 being north, increasing clockwise.  Unit hydrograph file  - describes the unit hydrograph. A sample unit hydrograph is provided on the  VIC 4.2d documentation website .  Station location file  - tells the routing model where to calculate streamflow.  Fraction file  - determines which grid cells are included in the model run, and allows inclusion of fractions of grid cells.  Runoff (forcing) files  - The forcings for the UW routing model are runoff and baseflow fields (typically outputs from a land surface model, such as VIC).   Note that the UW routing model can be used with the ASCII-formatted outputs from the VIC-5 classic driver, after some small modifications to the VIC output files.",
            "title": "Required input files"
        },
        {
            "location": "/#optional-input-files",
            "text": "Velocity file  - contains information about the flow velocity  xmask file  - related to the area of a grid cells  diff file  - flow diffusion file. Contains the flow diffusion parameter.   See the official  VIC 4.2d documentation website  for further details. While RoutR is helpful for creating input files for the UW routing model, users are encouraged to read the official documentation, as well.",
            "title": "Optional input files"
        },
        {
            "location": "/#installation",
            "text": "RoutR is an R package and can be installed from Github via the R command  install_github , from the  devtools  package. Also, the  raster  and  rgdal  packages are required.   library(devtools)\ninstall_github(\"https://github.com/jschap1/routR\")",
            "title": "Installation"
        },
        {
            "location": "/#recommended-software",
            "text": "GRASS GIS - for delineating watersheds and creating the flow direction file  Flow Direction Toolkit - for making manual adjustments to the flow direction file",
            "title": "Recommended software"
        },
        {
            "location": "/contact/",
            "text": "See \nhttps://jschap1.github.io/",
            "title": "Contact"
        },
        {
            "location": "/license/",
            "text": "Copyright 2020 Jacob Schaperow (\"MIT License\")\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "title": "License"
        },
        {
            "location": "/tutorial/",
            "text": "Upper Tuolumne subwatershed\n\n\nThis tutorial demonstrates how to create inputs for the UW routing model for a watershed in the Upper Tuolumne River Basin, California. I am assuming that you already have a flow direction map (e.g. generated from a DEM using GIS software), and that you have runoff and baseflow outputs from a hydrologic model (such as \nVIC\n).\n\n\nData and study area\n\n\nThe following demo data are included with the RoutR package:\n\n\n\n\nDigital elevation model (DEM) (raster)\n\n\nFlow direction map (raster)\n\n\nWatershed boundary (shapefile)\n\n\nGauge coordinates (shapefile)\n\n\nRiver centerlines (shapefile)\n\n\n\n\nThe study area is a 550 sq. km portion of the Upper Tuolumne basin. The watershed outlet is on the Tuolumne River, near its intersection with Piute Creek. \n\n\nFlow direction file\n\n\nYou can use different GIS softwares (e.g. ArcGIS, GRASS GIS) to generate a D8 flow direction map based on a DEM. However, automatic flow direction delineation is prone to errors, so it is usually a good idea to check that your flow direction map is consistent with the true shape of the watershed (if known). I have developed the \nFlow Direction Toolkit\n for this purpose.\n\n\nThe UW routing model requires a specific input format for its flow direction files. Therefore, RoutR includes the capability to convert from commonly-used formats to the required UW routing model input format.\n\n\ndata(upptuo) # load sample data\nplot(fd_merc, main = \"Flow direction map\")\n\n# Convert flow directions from ArcGIS convention to VIC/UW routing model convention.\nfd_merc_vic <- convert_flowdir(fd_merc, \"ARCGIS\", \"VIC\")\n\n\n\n\nIn case the flow direction map is larger than the basin area, clip the flow direction map to match the basin mask.\n\n\n# Create a mask of the basin\nbasinmask_merc <- rasterize(bb_merc, dem_merc)\nsavename <- \"fd_merc_clip.tif\"\n\n# Clip the flow direction file and save as ASCII Grid file\nfd_merc_clip <- clip_flowdir(fd_merc, basinmask_merc, savename, out_format = \"ascii\")\n\n\n\n\nFraction file\n\n\nIf the model grid cells are relatively large compared to the size of the study basin, then the coarse watershed mask may overestimate or underestimate the actual basin area. The routing model uses a fraction file to account for fractional coverage on the basin boundaries.\n\n\nfract <- make_fract(dem, bb, saveloc = \".\", \n    basename = \"tuo\", \n    target_res = 1/32\n    )\nplot(fract, \"Fractional area map\")\nlines(bb)\n\n\n\n\nCurrently, \nmake_fract\n only works for geographic coordinate systems with square grid cells. This is a limitation of RoutR.\n\n\nIf the model grid cells are small compared to the total size of the basin, then the partial grid cells will be insignificant, and you can use a trivial fraction file with all values equal to 1. RoutR provides \nmake_fract_trivial\n to create such a fraction file. (This function works with either geographic or projected coordinate systems.)\n\n\nfract <- make_fract_trivial(basinmask_merc, saveloc = \".\", basename = \"tuo\")\n\n\n\n\nStation location file\n\n\nIf you have a list of station locations, you can use \nmake_stnloc\n to automatically generate a station location file. \nr\n is a raster with the same resolution and extent as the flow direction file (i.e. the flow direction file).\n\n\n# Make a text file with gage coordinates, if one doesn't exist already\nwrite.table(coordinates(gage), file = \"gage_coords.txt\")\n\n# Generate the station location file\nr <- fd\nbasename <- \"tuo\"\nmake_stnloc(r, \"gage_coords.txt\", basename, saveloc = \".\")\n\n\n\n\nRunoff files\n\n\nFiles containing time series of runoff and baseflow are required at each grid cell in the watershed. These can be generated by running a land surface model, such as VIC, or runoff (and baseflow) fields can be downloaded from an existing dataset. \n\n\nUnit hydrograph file\n\n\nThe \nVIC 4.2d documentation\n has a unit hydrograph file that \"can be used unmodified if only flows on the monthly scale are required.\" It is reproduced below:\n\n\n0   0.0100\n1   0.2400\n2   0.3300\n3   0.1800\n4   0.1200\n5   0.0500\n6   0.0200\n7   0.0100\n8   0.0100\n9   0.0100\n10  0.0100\n11  0.0100\n\n\n\nParameter file\n\n\nThis is the control file for the UW routing model. It specifies the locations of the routing model inputs and outputs, and parameters such as start and end dates of the simulation. Here is the parameter file for the Upper Tuolumne subwatershed:\n\n\nHere is a block quote. At least, I think this is the correct Markdown syntax.",
            "title": "Tutorial"
        },
        {
            "location": "/tutorial/#upper-tuolumne-subwatershed",
            "text": "This tutorial demonstrates how to create inputs for the UW routing model for a watershed in the Upper Tuolumne River Basin, California. I am assuming that you already have a flow direction map (e.g. generated from a DEM using GIS software), and that you have runoff and baseflow outputs from a hydrologic model (such as  VIC ).",
            "title": "Upper Tuolumne subwatershed"
        },
        {
            "location": "/tutorial/#data-and-study-area",
            "text": "The following demo data are included with the RoutR package:   Digital elevation model (DEM) (raster)  Flow direction map (raster)  Watershed boundary (shapefile)  Gauge coordinates (shapefile)  River centerlines (shapefile)   The study area is a 550 sq. km portion of the Upper Tuolumne basin. The watershed outlet is on the Tuolumne River, near its intersection with Piute Creek.",
            "title": "Data and study area"
        },
        {
            "location": "/tutorial/#flow-direction-file",
            "text": "You can use different GIS softwares (e.g. ArcGIS, GRASS GIS) to generate a D8 flow direction map based on a DEM. However, automatic flow direction delineation is prone to errors, so it is usually a good idea to check that your flow direction map is consistent with the true shape of the watershed (if known). I have developed the  Flow Direction Toolkit  for this purpose.  The UW routing model requires a specific input format for its flow direction files. Therefore, RoutR includes the capability to convert from commonly-used formats to the required UW routing model input format.  data(upptuo) # load sample data\nplot(fd_merc, main = \"Flow direction map\")\n\n# Convert flow directions from ArcGIS convention to VIC/UW routing model convention.\nfd_merc_vic <- convert_flowdir(fd_merc, \"ARCGIS\", \"VIC\")  In case the flow direction map is larger than the basin area, clip the flow direction map to match the basin mask.  # Create a mask of the basin\nbasinmask_merc <- rasterize(bb_merc, dem_merc)\nsavename <- \"fd_merc_clip.tif\"\n\n# Clip the flow direction file and save as ASCII Grid file\nfd_merc_clip <- clip_flowdir(fd_merc, basinmask_merc, savename, out_format = \"ascii\")",
            "title": "Flow direction file"
        },
        {
            "location": "/tutorial/#fraction-file",
            "text": "If the model grid cells are relatively large compared to the size of the study basin, then the coarse watershed mask may overestimate or underestimate the actual basin area. The routing model uses a fraction file to account for fractional coverage on the basin boundaries.  fract <- make_fract(dem, bb, saveloc = \".\", \n    basename = \"tuo\", \n    target_res = 1/32\n    )\nplot(fract, \"Fractional area map\")\nlines(bb)  Currently,  make_fract  only works for geographic coordinate systems with square grid cells. This is a limitation of RoutR.  If the model grid cells are small compared to the total size of the basin, then the partial grid cells will be insignificant, and you can use a trivial fraction file with all values equal to 1. RoutR provides  make_fract_trivial  to create such a fraction file. (This function works with either geographic or projected coordinate systems.)  fract <- make_fract_trivial(basinmask_merc, saveloc = \".\", basename = \"tuo\")",
            "title": "Fraction file"
        },
        {
            "location": "/tutorial/#station-location-file",
            "text": "If you have a list of station locations, you can use  make_stnloc  to automatically generate a station location file.  r  is a raster with the same resolution and extent as the flow direction file (i.e. the flow direction file).  # Make a text file with gage coordinates, if one doesn't exist already\nwrite.table(coordinates(gage), file = \"gage_coords.txt\")\n\n# Generate the station location file\nr <- fd\nbasename <- \"tuo\"\nmake_stnloc(r, \"gage_coords.txt\", basename, saveloc = \".\")",
            "title": "Station location file"
        },
        {
            "location": "/tutorial/#runoff-files",
            "text": "Files containing time series of runoff and baseflow are required at each grid cell in the watershed. These can be generated by running a land surface model, such as VIC, or runoff (and baseflow) fields can be downloaded from an existing dataset.",
            "title": "Runoff files"
        },
        {
            "location": "/tutorial/#unit-hydrograph-file",
            "text": "The  VIC 4.2d documentation  has a unit hydrograph file that \"can be used unmodified if only flows on the monthly scale are required.\" It is reproduced below:  0   0.0100\n1   0.2400\n2   0.3300\n3   0.1800\n4   0.1200\n5   0.0500\n6   0.0200\n7   0.0100\n8   0.0100\n9   0.0100\n10  0.0100\n11  0.0100",
            "title": "Unit hydrograph file"
        },
        {
            "location": "/tutorial/#parameter-file",
            "text": "This is the control file for the UW routing model. It specifies the locations of the routing model inputs and outputs, and parameters such as start and end dates of the simulation. Here is the parameter file for the Upper Tuolumne subwatershed:  Here is a block quote. At least, I think this is the correct Markdown syntax.",
            "title": "Parameter file"
        }
    ]
}